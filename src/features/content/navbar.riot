<navbar>
  <nav class="{ state.isHidden && 'hidden' }">
    <a
      each="{ link in state.LINKS }"
      type="text/html"
      title="{link.name}"
      href="#{link.name.toLowerCase()}">
      <i class="fa-solid fa-fw fa-{link.icon}"></i>
    </a>
  </nav>

  <style>
    :host {
      pointer-events: none;
      position: fixed;
      width: 100%;
      z-index: 1;
    }

    nav {
      pointer-events: auto;
      box-sizing: border-box;
      max-width: fit-content;
      min-width: 15.875rem;
      min-height: 3.25rem;
      font-size: 1.125rem;
      margin: 1rem auto;
      user-select: none;
      padding: 0.5rem 0.625rem;
      background: var(--main-fg);
      box-shadow: var(--main-shadow);
      border-radius: var(--main-radius);
      transition: transform var(--main-transition);
    }

    .hidden {
      transform: translateY(-5rem);
    }

    a {
      margin: 0 0.625rem;
      position: relative;
      color: var(--main-bg);
      border-radius: var(--main-radius);
      -webkit-tap-highlight-color: var(--main-tap-fg);
    }

    a::before {
      position: absolute;
      display: block;
      content: '';
      left: 0;
      width: 100%;
      height: 0.125rem;
      bottom: -0.375rem;
      transform: scaleX(0);
      background: var(--main-bg);
      border-radius: var(--main-radius);
      transition: transform var(--main-transition);
    }

    @media (hover: hover) {
      a:hover::before {
        transform: scaleX(1);
      }
    }

    i {
      width: 1rem;
      max-height: 1rem;
      padding: 0.625rem 0.5rem;
    }
  </style>

  <script>
    const LINKS = [
      {
        name: 'Hero',
        icon: 'user'
      },
      {
        name: 'Skills',
        icon: 'screwdriver-wrench'
      },
      {
        name: 'Projects',
        icon: 'toolbox'
      },
      {
        name: 'Contact',
        icon: 'paper-plane'
      }
    ];

    export default {
      state: {
        LINKS,
        isHidden: false,
        prevScrollPos: 0
      },

      // Hide on Scroll
      onMounted() {
        this.handleScroll = this.handleScroll.bind(this);
        window.addEventListener('scroll', this.handleScroll);
      },

      onBeforeUnmount() {
        window.removeEventListener('scroll', this.handleScroll);
      },

      handleScroll() {
        const currScrollPos = window.scrollY || window.pageYOffset;
        const threshold = 80;
        const delay = 150;

        this.update({
          isHidden:
            currScrollPos > this.state.prevScrollPos &&
            currScrollPos > threshold
        });

        // Prevent Scroll Dither
        setTimeout(() => {
          this.update({
            prevScrollPos: currScrollPos
          });
        }, delay);
      }
    };
  </script>
</navbar>
