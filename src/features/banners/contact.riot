<contact id="contact" class="content">
  <h1>
    <i class="fa-solid fa-fw fa-paper-plane"></i>
    Contact
  </h1>

  <form onsubmit="{state.isValid && handleSubmit}" novalidate>
    <input type="checkbox" name="botcheck" />

    <div>
      <label for="name">Name</label>
      <input
        type="text"
        id="name"
        name="name"
        minlength="1"
        maxlength="128"
        title=""
        required />
    </div>

    <div>
      <label for="email">Email</label>
      <input
        type="email"
        id="email"
        name="email"
        minlength="1"
        maxlength="128"
        title=""
        required />
    </div>

    <div>
      <label for="message">Message</label>
      <textarea
        name="message"
        id="message"
        rows="10"
        minlength="1"
        maxlength="4000"
        spellcheck="false"
        title=""
        required></textarea>
    </div>

    <span>
      <button type="submit" disabled="{!state.isValid}">Send</button>
      <i class="fa-solid fa-{state.result} fa-fw"></i>
    </span>
  </form>

  <style>
    input[name='botcheck'] {
      display: none;
    }

    form {
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      gap: 1.5rem;
    }

    label {
      padding-bottom: 0.75rem;
      word-wrap: break-word;
      font-size: 1.17rem;
      text-align: start;
      user-select: none;
      line-height: 1;
      display: block;
    }

    input,
    textarea {
      border: 0;
      width: 24rem;
      max-width: 80svw;
      min-height: 1.5rem;
      caret-color: inherit;
      padding: 0.375rem 0.5rem;
      outline: var(--outline);
      background: var(--field);
      box-shadow: var(--shadow);
      border-radius: var(--radius);
      transition: outline-color var(--transition);
    }

    @media (hover: hover) {
      input:hover,
      textarea:hover,
      button:hover {
        outline-color: var(--hover);
      }
    }

    input:focus,
    textarea:focus {
      outline-color: inherit;
    }

    textarea {
      resize: vertical;
      overflow: clip;
    }

    span {
      width: 25rem;
      text-align: start;
      max-width: calc(80svw + 1rem);
    }

    span > i {
      user-select: none;
      font-size: 1.625rem;
      margin-left: 0.875rem;
      vertical-align: middle;
    }

    button {
      border: 0;
      width: 10rem;
      line-height: 1;
      max-width: 100%;
      cursor: pointer;
      padding: 0.75rem;
      font-weight: 500;
      color: var(--bg);
      background: var(--fg);
      outline: var(--outline);
      box-shadow: var(--shadow);
      border-radius: var(--radius);
      -webkit-tap-highlight-color: var(--tap-bg);
      transition:
        color var(--transition),
        background var(--transition),
        outline-color var(--transition);
    }

    button:disabled {
      color: inherit;
      cursor: not-allowed;
      background: var(--field);
    }

    button:focus {
      outline-color: var(--tap-fg);
    }

    .fa-check {
      color: var(--success);
    }

    .fa-xmark {
      color: var(--error);
    }
  </style>

  <script>
    const OPTIONS = {
      access_key: import.meta.env.VITE_ACCESS_KEY,
      from_name: 'Portfolio | eldarlrd',
      subject: 'New Submission'
    }

    export default {
      state: {
        result: '',
        isValid: false
      },

      onMounted() {
        const form = this.$('form');
        form.addEventListener('input', () => {
          this.update({
            isValid: form.checkValidity()
          });
        });
      },

      handleSubmit(e) {
        e.preventDefault();

        const formData = new FormData(e.target);
        const formObj = {
          ...Object.fromEntries(formData),
          ...OPTIONS
        };

        this.update({
          result: 'spinner',
          isValid: false
        });

        fetch('https://api.web3forms.com/submit', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            Accept: 'application/json'
          },
          body: JSON.stringify(formObj)
        })
          .then(async response => {
            const json = await response.json();
            if (response.status === 200) {
              this.update({
                result: 'check'
              });
            }
          })
          .catch(error => {
            this.update({
              result: 'xmark'
            });
          })
          .then(() => {
            e.target.reset();
            setTimeout(() => {
              this.update({
                result: ''
              });
            }, 5000);
          });
      }
    };
  </script>
</contact>
